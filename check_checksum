#!/bin/bash
###############################################################################
# check_checksum
#
# Monitoring files against a reference checksum
###############################################################################
# Copyright (c) 2017 NETWAYS GmbH <info@netways.de>
#               2017 Markus Frosch <markus.frosch@netways.de>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
###############################################################################

set -e

# internals
version='0.3.0'
modes_supported=(md5 sha1 sha256 sha512)
normal_exit=

# config by options
checksum_file=
checksums=()
files=()
mode=sha512
path=
checksumopt=()
temp_files=()

print_usage() {
  echo
  echo "Usage: $0 -c <checksum file> -p <path> [-m <mode>] [-f <file>]"
  echo
}

print_help() {
  print_usage
  echo "Version: $version"
  echo
  echo "Required options:"
  echo " -c <checksum file>  The reference file containing checksums"
  echo
  echo "Alterative checksum input:"
  echo " -C <checksum>       Checksum for the file, can be specified multiple times."
  echo "                     Compares the checksums against files specified by -f."
  echo
  echo "Optional options:"
  echo " -m <type>           The checksum mode (Default: $mode)"
  echo " -p <path>           Path to change to before testing files"
  echo " -f <file>           An actual file that must be checked for, can be an HTTP(s) URL"
  echo "                     (It's an error when the checksum file does not"
  echo "                      contain a checksum for it) - can be repeated"
  echo " -S                  Enable --strict mode on *sum programs"
  echo "                     (Only supported in recent versions)"
  echo
  echo "Supported modes for checksum: ${modes_supported[*]}"
  echo
  echo "Example:"
  echo "  echo test > testfile.txt"
  echo "  sha1sum testfile.txt > checksums"
  echo "  ./check_checksum -c checksums -p \`pwd\`"
  echo
  exit 3
}

finish() {
  for file in "${temp_files[@]}"; do
    rm -f "$file"
  done
  if [ -z "$normal_exit" ]; then
    echo "Unexpected exit!"
    exit 3
  fi
}

plugin_exit() {
  local rc="$1"
  local message="$2"
  shift 2

  if [ "$rc" -eq 0 ]; then
    echo -n "CHECKSUM OK - "
  elif [ "$rc" -eq 1 ]; then
    echo -n "CHECKSUM WARNING - "
  elif [ "$rc" -eq 2 ]; then
    echo -n "CHECKSUM CRITICAL - "
  else
    echo -n "CHECKSUM UNKNOWN - "
  fi

  # shellcheck disable=SC2059
  printf "$message\\n" "$@"
  normal_exit=1
  exit "$rc"
}

trap finish EXIT SIGINT SIGTERM

# parse options
while getopts ":hVSc:C:p:m:f:" opt; do
  case "$opt" in
    V)
      echo "Version $version"
      normal_exit=1
      exit 3
      ;;
    h)
      print_help
      ;;
    c)
      checksum_file="$OPTARG"
      ;;
    C)
      if [ -z "$OPTARG" ]; then
        echo "Option value must not be empty: -C"
        normal_exit=1
        print_usage
        exit 3
      fi
      checksums+=("$OPTARG")
      ;;
    p)
      path="$OPTARG"
      ;;
    m)
      mode="$OPTARG"
      ;;
    f)
    if [ -z "$OPTARG" ]; then
      echo "Option value must not be empty: -f"
      normal_exit=1
      print_usage
      exit 3
    fi
      files+=("$OPTARG")
      ;;
    S)
      checksumopt+=("--strict")
      ;;
    \?)
      echo "Invalid option: -$OPTARG"
      normal_exit=1
      print_usage
      exit 3
      ;;
  esac
done

files_cached=()

count_checksums="${#checksums[@]}"
if [ -n "$checksum_file" ]; then
  if [ ! -r "$checksum_file" ]; then
    plugin_exit 3 "checksum file can not be read: %s" "$checksum_file"
  elif [ ! -s "$checksum_file" ]; then
    plugin_exit 3 "checksum file seems to be empty: %s" "$checksum_file"
  elif [ "$count_checksums" -gt 0 ]; then
    plugin_exit 3 "You can only specify -c or -C!"
  fi
elif [ "$count_checksums" -gt 0 ]; then
  if [ "$count_checksums" -ne "${#files[@]}" ]; then
    plugin_exit 3 "Count of checksums (-C) does not match files (-f)!"
  fi

  for file in "${files[@]}"; do
    if [[ "$file" = http://* ]] || [[ "$file" = https://* ]]; then
      cache="$(mktemp)"
      temp_files+=("$cache")
      #echo "Downloading file $file to $cache"
      if ! curl_output="$(curl -LsS --fail "$file" -o "$cache" 2>&1)"; then
        plugin_exit 3 'Download of remote file %s failed:\n%s' "$file" "$curl_output"
      fi
      files_cached+=("$cache")
    else
      files_cached+=("$file")
    fi
  done

  checksum_file="$(mktemp)"
  temp_files+=("$checksum_file")

  for i in $(seq 0 $((count_checksums - 1))); do
    printf '%s  %s\n' "${checksums[$i]}" "${files_cached[$i]}" >> "$checksum_file"
  done
else
  plugin_exit 3 "Please specify -c or -C with checksums."
fi

if [ -n "$path" ]; then
  if ! cd "$path"; then
    plugin_exit 3 "could not change directory to: %s" "$path"
  fi
fi

# validate mode
for mode_a in "${modes_supported[@]}"; do
  if [ "$mode" = "$mode_a" ]; then
    break
  else
    continue
  fi
done

if [ "$mode" != "$mode_a" ]; then
  plugin_exit 3 "Checksum mode '%s' is not supported!" "$mode"
fi

# check if checksum tool is installed
if ! checksumtool="$(command -v "${mode}sum" 2>/dev/null)"; then
  plugin_exit 3 "Checksum command %s could not be found!" "${mode}sum"
fi

# resolve checksum location
checksum_file="$(readlink -f "$checksum_file")"

# build command to run
checksumcmd=("$checksumtool" "${checksumopt[@]}" "-c" "$checksum_file")

if output="$("${checksumcmd[@]}" 2>&1)"; then
  count_files="${#files[@]}"
  for i in $(seq 0 $((count_files - 1))); do
    file="${files[$i]}"

    if [ -n "${files_cached[$i]}" ]; then
      cache="${files_cached[$i]}"
      output="${output//$cache/$file}"
    fi

    if ! echo "$output" | grep -qF "$file"; then
      plugin_exit 2 "File '%s' must be validated by checksum!\\n%s" "$file" "$output"
    fi
  done

  plugin_exit 0 "Checksums match\\n%s" "$output"
else
  plugin_exit 2 "Checksums do not match\\n%s" "$output"
fi
